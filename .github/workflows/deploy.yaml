name: deploy subgraph-monitor
on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to deploy'
        required: true
        default: 'latest'
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - production
          - staging
          - development
      subgraph_endpoint:
        description: 'Subgraph endpoint URL'
        required: false
      rpc_endpoint:
        description: 'RPC endpoint URL'
        required: false
      monitor_port:
        description: 'Monitor port'
        required: false

jobs:
  deploy:
    name: deploy to ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download release binary
        run: |
          if [ "${{ github.event.inputs.tag }}" = "latest" ]; then
            DOWNLOAD_URL=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r '.assets[0].browser_download_url')
          else
            DOWNLOAD_URL=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.event.inputs.tag }} | jq -r '.assets[0].browser_download_url')
          fi
          curl -L $DOWNLOAD_URL -o subgraph-monitor
          chmod +x subgraph-monitor
      
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Deploy using Docker
        env:
          ENV_NAME: ${{ github.event.inputs.environment }}
          CONTAINER_NAME: subgraph-monitor-${{ github.event.inputs.environment }}
          # Environment specific settings with defaults
          SUBGRAPH_ENDPOINT: ${{ github.event.inputs.subgraph_endpoint || 'https://flare-query.sceptre.fi/subgraphs/name/sflr-subgraph' }}
          RPC_ENDPOINT: ${{ github.event.inputs.rpc_endpoint || 'https://flare.gateway.tenderly.co' }}
          MONITOR_PORT: ${{ github.event.inputs.monitor_port || (github.event.inputs.environment == 'production' && '3660') || (github.event.inputs.environment == 'staging' && '3661') || '3662' }}
        run: |
          # Add server to known hosts
          ssh-keyscan ${{ vars.SERVER_IP }} >> ~/.ssh/known_hosts
          
          # Create a temporary directory 
          mkdir -p docker-deploy
          
          # Create a basic Dockerfile
          cat > docker-deploy/Dockerfile << EOF
          FROM debian:bullseye-slim
          WORKDIR /app
          COPY subgraph-monitor /app/subgraph-monitor
          RUN chmod +x /app/subgraph-monitor
          ENTRYPOINT ["/app/subgraph-monitor"]
          CMD ["--endpoint", "${SUBGRAPH_ENDPOINT}", "--rpc", "${RPC_ENDPOINT}", "--port", "${MONITOR_PORT}"]
          EOF
          
          # Create docker-compose.yml
          cat > docker-deploy/docker-compose.yml << EOF
          version: '3'
          services:
            subgraph-monitor:
              container_name: ${CONTAINER_NAME}
              build: .
              restart: unless-stopped
              ports:
                - "${MONITOR_PORT}:${MONITOR_PORT}"
              environment:
                - ENDPOINT=${SUBGRAPH_ENDPOINT}
                - RPC=${RPC_ENDPOINT}
                - PORT=${MONITOR_PORT}
          EOF
          
          # Copy our binary to the deployment directory
          cp subgraph-monitor docker-deploy/
          
          # Create a deployment script
          cat > docker-deploy/deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          # Stop and remove existing container if it exists
          docker stop ${CONTAINER_NAME} || true
          docker rm ${CONTAINER_NAME} || true
          
          # Build and start the new container
          docker-compose up -d --build
          
          # Show logs
          docker logs ${CONTAINER_NAME}
          EOF
          
          chmod +x docker-deploy/deploy.sh
          
          # Create the deployment directory on the server
          ssh ${{ vars.SSH_USER }}@${{ vars.SERVER_IP }} "mkdir -p ~/subgraph-monitor-${ENV_NAME}"
          
          # Copy deployment files
          scp -r docker-deploy/* ${{ vars.SSH_USER }}@${{ vars.SERVER_IP }}:~/subgraph-monitor-${ENV_NAME}/
          
          # Execute the deployment
          ssh ${{ vars.SSH_USER }}@${{ vars.SERVER_IP }} << EOF
            cd ~/subgraph-monitor-${ENV_NAME}
            
            # Set environment variables for the script
            export CONTAINER_NAME=${CONTAINER_NAME}
            
            # Run the deployment script
            ./deploy.sh
            
            # Show running containers
            docker ps | grep subgraph-monitor
          EOF
